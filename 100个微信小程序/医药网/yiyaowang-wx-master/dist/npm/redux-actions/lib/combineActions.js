"use strict";var exports=module.exports={};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ACTION_TYPE_DELIMITER = undefined;
exports.default = combineActions;

var _isString = require('../../lodash/isString.js');

var _isString2 = _interopRequireDefault(_isString);

var _isFunction = require('../../lodash/isFunction.js');

var _isFunction2 = _interopRequireDefault(_isFunction);

var _isEmpty = require('../../lodash/isEmpty.js');

var _isEmpty2 = _interopRequireDefault(_isEmpty);

var _toString = require('../../lodash/toString.js');

var _toString2 = _interopRequireDefault(_toString);

var _isSymbol = require('../../lodash/isSymbol.js');

var _isSymbol2 = _interopRequireDefault(_isSymbol);

var _invariant = require('../../invariant/browser.js');

var _invariant2 = _interopRequireDefault(_invariant);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var ACTION_TYPE_DELIMITER = exports.ACTION_TYPE_DELIMITER = '||';

function isValidActionType(actionType) {
  return (0, _isString2.default)(actionType) || (0, _isFunction2.default)(actionType) || (0, _isSymbol2.default)(actionType);
}

function isValidActionTypes(actionTypes) {
  if ((0, _isEmpty2.default)(actionTypes)) {
    return false;
  }
  return actionTypes.every(isValidActionType);
}

function combineActions() {
  for (var _len = arguments.length, actionsTypes = Array(_len), _key = 0; _key < _len; _key++) {
    actionsTypes[_key] = arguments[_key];
  }

  (0, _invariant2.default)(isValidActionTypes(actionsTypes), 'Expected action types to be strings, symbols, or action creators');
  var combinedActionType = actionsTypes.map(_toString2.default).join(ACTION_TYPE_DELIMITER);
  return { toString: function toString() {
      return combinedActionType;
    } };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbWJpbmVBY3Rpb25zLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQUNUSU9OX1RZUEVfREVMSU1JVEVSIiwidW5kZWZpbmVkIiwiZGVmYXVsdCIsImNvbWJpbmVBY3Rpb25zIiwiX2lzU3RyaW5nIiwicmVxdWlyZSIsIl9pc1N0cmluZzIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2lzRnVuY3Rpb24iLCJfaXNGdW5jdGlvbjIiLCJfaXNFbXB0eSIsIl9pc0VtcHR5MiIsIl90b1N0cmluZyIsIl90b1N0cmluZzIiLCJfaXNTeW1ib2wiLCJfaXNTeW1ib2wyIiwiX2ludmFyaWFudCIsIl9pbnZhcmlhbnQyIiwib2JqIiwiX19lc01vZHVsZSIsImlzVmFsaWRBY3Rpb25UeXBlIiwiYWN0aW9uVHlwZSIsImlzVmFsaWRBY3Rpb25UeXBlcyIsImFjdGlvblR5cGVzIiwiZXZlcnkiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYWN0aW9uc1R5cGVzIiwiQXJyYXkiLCJfa2V5IiwiY29tYmluZWRBY3Rpb25UeXBlIiwibWFwIiwiam9pbiIsInRvU3RyaW5nIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLFNBQU87QUFEb0MsQ0FBN0M7QUFHQUQsUUFBUUUscUJBQVIsR0FBZ0NDLFNBQWhDO0FBQ0FILFFBQVFJLE9BQVIsR0FBa0JDLGNBQWxCOztBQUVBLElBQUlDLFlBQVlDLFFBQVEsaUJBQVIsQ0FBaEI7O0FBRUEsSUFBSUMsYUFBYUMsdUJBQXVCSCxTQUF2QixDQUFqQjs7QUFFQSxJQUFJSSxjQUFjSCxRQUFRLG1CQUFSLENBQWxCOztBQUVBLElBQUlJLGVBQWVGLHVCQUF1QkMsV0FBdkIsQ0FBbkI7O0FBRUEsSUFBSUUsV0FBV0wsUUFBUSxnQkFBUixDQUFmOztBQUVBLElBQUlNLFlBQVlKLHVCQUF1QkcsUUFBdkIsQ0FBaEI7O0FBRUEsSUFBSUUsWUFBWVAsUUFBUSxpQkFBUixDQUFoQjs7QUFFQSxJQUFJUSxhQUFhTix1QkFBdUJLLFNBQXZCLENBQWpCOztBQUVBLElBQUlFLFlBQVlULFFBQVEsaUJBQVIsQ0FBaEI7O0FBRUEsSUFBSVUsYUFBYVIsdUJBQXVCTyxTQUF2QixDQUFqQjs7QUFFQSxJQUFJRSxhQUFhWCxRQUFRLFdBQVIsQ0FBakI7O0FBRUEsSUFBSVksY0FBY1YsdUJBQXVCUyxVQUF2QixDQUFsQjs7QUFFQSxTQUFTVCxzQkFBVCxDQUFnQ1csR0FBaEMsRUFBcUM7QUFBRSxTQUFPQSxPQUFPQSxJQUFJQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QixFQUFFaEIsU0FBU2dCLEdBQVgsRUFBckM7QUFBd0Q7O0FBRS9GLElBQUlsQix3QkFBd0JGLFFBQVFFLHFCQUFSLEdBQWdDLElBQTVEOztBQUVBLFNBQVNvQixpQkFBVCxDQUEyQkMsVUFBM0IsRUFBdUM7QUFDckMsU0FBTyxDQUFDLEdBQUdmLFdBQVdKLE9BQWYsRUFBd0JtQixVQUF4QixLQUF1QyxDQUFDLEdBQUdaLGFBQWFQLE9BQWpCLEVBQTBCbUIsVUFBMUIsQ0FBdkMsSUFBZ0YsQ0FBQyxHQUFHTixXQUFXYixPQUFmLEVBQXdCbUIsVUFBeEIsQ0FBdkY7QUFDRDs7QUFFRCxTQUFTQyxrQkFBVCxDQUE0QkMsV0FBNUIsRUFBeUM7QUFDdkMsTUFBSSxDQUFDLEdBQUdaLFVBQVVULE9BQWQsRUFBdUJxQixXQUF2QixDQUFKLEVBQXlDO0FBQ3ZDLFdBQU8sS0FBUDtBQUNEO0FBQ0QsU0FBT0EsWUFBWUMsS0FBWixDQUFrQkosaUJBQWxCLENBQVA7QUFDRDs7QUFFRCxTQUFTakIsY0FBVCxHQUEwQjtBQUN4QixPQUFLLElBQUlzQixPQUFPQyxVQUFVQyxNQUFyQixFQUE2QkMsZUFBZUMsTUFBTUosSUFBTixDQUE1QyxFQUF5REssT0FBTyxDQUFyRSxFQUF3RUEsT0FBT0wsSUFBL0UsRUFBcUZLLE1BQXJGLEVBQTZGO0FBQzNGRixpQkFBYUUsSUFBYixJQUFxQkosVUFBVUksSUFBVixDQUFyQjtBQUNEOztBQUVELEdBQUMsR0FBR2IsWUFBWWYsT0FBaEIsRUFBeUJvQixtQkFBbUJNLFlBQW5CLENBQXpCLEVBQTJELGtFQUEzRDtBQUNBLE1BQUlHLHFCQUFxQkgsYUFBYUksR0FBYixDQUFpQm5CLFdBQVdYLE9BQTVCLEVBQXFDK0IsSUFBckMsQ0FBMENqQyxxQkFBMUMsQ0FBekI7QUFDQSxTQUFPLEVBQUVrQyxVQUFVLFNBQVNBLFFBQVQsR0FBb0I7QUFDbkMsYUFBT0gsa0JBQVA7QUFDRCxLQUZJLEVBQVA7QUFHRCIsImZpbGUiOiJ1bmtub3duIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5BQ1RJT05fVFlQRV9ERUxJTUlURVIgPSB1bmRlZmluZWQ7XG5leHBvcnRzLmRlZmF1bHQgPSBjb21iaW5lQWN0aW9ucztcblxudmFyIF9pc1N0cmluZyA9IHJlcXVpcmUoJ2xvZGFzaC9pc1N0cmluZycpO1xuXG52YXIgX2lzU3RyaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzU3RyaW5nKTtcblxudmFyIF9pc0Z1bmN0aW9uID0gcmVxdWlyZSgnbG9kYXNoL2lzRnVuY3Rpb24nKTtcblxudmFyIF9pc0Z1bmN0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzRnVuY3Rpb24pO1xuXG52YXIgX2lzRW1wdHkgPSByZXF1aXJlKCdsb2Rhc2gvaXNFbXB0eScpO1xuXG52YXIgX2lzRW1wdHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNFbXB0eSk7XG5cbnZhciBfdG9TdHJpbmcgPSByZXF1aXJlKCdsb2Rhc2gvdG9TdHJpbmcnKTtcblxudmFyIF90b1N0cmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90b1N0cmluZyk7XG5cbnZhciBfaXNTeW1ib2wgPSByZXF1aXJlKCdsb2Rhc2gvaXNTeW1ib2wnKTtcblxudmFyIF9pc1N5bWJvbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1N5bWJvbCk7XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBBQ1RJT05fVFlQRV9ERUxJTUlURVIgPSBleHBvcnRzLkFDVElPTl9UWVBFX0RFTElNSVRFUiA9ICd8fCc7XG5cbmZ1bmN0aW9uIGlzVmFsaWRBY3Rpb25UeXBlKGFjdGlvblR5cGUpIHtcbiAgcmV0dXJuICgwLCBfaXNTdHJpbmcyLmRlZmF1bHQpKGFjdGlvblR5cGUpIHx8ICgwLCBfaXNGdW5jdGlvbjIuZGVmYXVsdCkoYWN0aW9uVHlwZSkgfHwgKDAsIF9pc1N5bWJvbDIuZGVmYXVsdCkoYWN0aW9uVHlwZSk7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRBY3Rpb25UeXBlcyhhY3Rpb25UeXBlcykge1xuICBpZiAoKDAsIF9pc0VtcHR5Mi5kZWZhdWx0KShhY3Rpb25UeXBlcykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIGFjdGlvblR5cGVzLmV2ZXJ5KGlzVmFsaWRBY3Rpb25UeXBlKTtcbn1cblxuZnVuY3Rpb24gY29tYmluZUFjdGlvbnMoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhY3Rpb25zVHlwZXMgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhY3Rpb25zVHlwZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICAoMCwgX2ludmFyaWFudDIuZGVmYXVsdCkoaXNWYWxpZEFjdGlvblR5cGVzKGFjdGlvbnNUeXBlcyksICdFeHBlY3RlZCBhY3Rpb24gdHlwZXMgdG8gYmUgc3RyaW5ncywgc3ltYm9scywgb3IgYWN0aW9uIGNyZWF0b3JzJyk7XG4gIHZhciBjb21iaW5lZEFjdGlvblR5cGUgPSBhY3Rpb25zVHlwZXMubWFwKF90b1N0cmluZzIuZGVmYXVsdCkuam9pbihBQ1RJT05fVFlQRV9ERUxJTUlURVIpO1xuICByZXR1cm4geyB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gY29tYmluZWRBY3Rpb25UeXBlO1xuICAgIH0gfTtcbn0iXX0=