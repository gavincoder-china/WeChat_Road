"use strict";var exports=module.exports={};
var _from = require('../../babel-runtime/core-js/array/from.js');

var _from2 = _interopRequireDefault2(_from);

function _interopRequireDefault2(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = handleActions;

var _handleAction = require('./handleAction.js');

var _handleAction2 = _interopRequireDefault(_handleAction);

var _ownKeys = require('./ownKeys.js');

var _ownKeys2 = _interopRequireDefault(_ownKeys);

var _reduceReducers = require('../../reduce-reducers/lib/index.js');

var _reduceReducers2 = _interopRequireDefault(_reduceReducers);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }return arr2;
  } else {
    return (0, _from2.default)(arr);
  }
}

function handleActions(handlers, defaultState) {
  var reducers = (0, _ownKeys2.default)(handlers).map(function (type) {
    return (0, _handleAction2.default)(type, handlers[type], defaultState);
  });
  var reducer = _reduceReducers2.default.apply(undefined, _toConsumableArray(reducers));
  return function (state, action) {
    return reducer(state, action);
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhbmRsZUFjdGlvbnMuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwiaGFuZGxlQWN0aW9ucyIsIl9oYW5kbGVBY3Rpb24iLCJyZXF1aXJlIiwiX2hhbmRsZUFjdGlvbjIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX293bktleXMiLCJfb3duS2V5czIiLCJfcmVkdWNlUmVkdWNlcnMiLCJfcmVkdWNlUmVkdWNlcnMyIiwib2JqIiwiX19lc01vZHVsZSIsIl90b0NvbnN1bWFibGVBcnJheSIsImFyciIsIkFycmF5IiwiaXNBcnJheSIsImkiLCJhcnIyIiwibGVuZ3RoIiwiaGFuZGxlcnMiLCJkZWZhdWx0U3RhdGUiLCJyZWR1Y2VycyIsIm1hcCIsInR5cGUiLCJyZWR1Y2VyIiwiYXBwbHkiLCJ1bmRlZmluZWQiLCJzdGF0ZSIsImFjdGlvbiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0FBRUFBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxTQUFPO0FBRG9DLENBQTdDO0FBR0FELFFBQVFFLE9BQVIsR0FBa0JDLGFBQWxCOztBQUVBLElBQUlDLGdCQUFnQkMsUUFBUSxnQkFBUixDQUFwQjs7QUFFQSxJQUFJQyxpQkFBaUJDLHVCQUF1QkgsYUFBdkIsQ0FBckI7O0FBRUEsSUFBSUksV0FBV0gsUUFBUSxXQUFSLENBQWY7O0FBRUEsSUFBSUksWUFBWUYsdUJBQXVCQyxRQUF2QixDQUFoQjs7QUFFQSxJQUFJRSxrQkFBa0JMLFFBQVEsaUJBQVIsQ0FBdEI7O0FBRUEsSUFBSU0sbUJBQW1CSix1QkFBdUJHLGVBQXZCLENBQXZCOztBQUVBLFNBQVNILHNCQUFULENBQWdDSyxHQUFoQyxFQUFxQztBQUFFLFNBQU9BLE9BQU9BLElBQUlDLFVBQVgsR0FBd0JELEdBQXhCLEdBQThCLEVBQUVWLFNBQVNVLEdBQVgsRUFBckM7QUFBd0Q7O0FBRS9GLFNBQVNFLGtCQUFULENBQTRCQyxHQUE1QixFQUFpQztBQUFFLE1BQUlDLE1BQU1DLE9BQU4sQ0FBY0YsR0FBZCxDQUFKLEVBQXdCO0FBQUUsU0FBSyxJQUFJRyxJQUFJLENBQVIsRUFBV0MsT0FBT0gsTUFBTUQsSUFBSUssTUFBVixDQUF2QixFQUEwQ0YsSUFBSUgsSUFBSUssTUFBbEQsRUFBMERGLEdBQTFELEVBQStEO0FBQUVDLFdBQUtELENBQUwsSUFBVUgsSUFBSUcsQ0FBSixDQUFWO0FBQW1CLEtBQUMsT0FBT0MsSUFBUDtBQUFjLEdBQTdILE1BQW1JO0FBQUUsV0FBTyxvQkFBV0osR0FBWCxDQUFQO0FBQXlCO0FBQUU7O0FBRW5NLFNBQVNaLGFBQVQsQ0FBdUJrQixRQUF2QixFQUFpQ0MsWUFBakMsRUFBK0M7QUFDN0MsTUFBSUMsV0FBVyxDQUFDLEdBQUdkLFVBQVVQLE9BQWQsRUFBdUJtQixRQUF2QixFQUFpQ0csR0FBakMsQ0FBcUMsVUFBVUMsSUFBVixFQUFnQjtBQUNsRSxXQUFPLENBQUMsR0FBR25CLGVBQWVKLE9BQW5CLEVBQTRCdUIsSUFBNUIsRUFBa0NKLFNBQVNJLElBQVQsQ0FBbEMsRUFBa0RILFlBQWxELENBQVA7QUFDRCxHQUZjLENBQWY7QUFHQSxNQUFJSSxVQUFVZixpQkFBaUJULE9BQWpCLENBQXlCeUIsS0FBekIsQ0FBK0JDLFNBQS9CLEVBQTBDZCxtQkFBbUJTLFFBQW5CLENBQTFDLENBQWQ7QUFDQSxTQUFPLFVBQVVNLEtBQVYsRUFBaUJDLE1BQWpCLEVBQXlCO0FBQzlCLFdBQU9KLFFBQVFHLEtBQVIsRUFBZUMsTUFBZixDQUFQO0FBQ0QsR0FGRDtBQUdEIiwiZmlsZSI6InVua25vd24iLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBoYW5kbGVBY3Rpb25zO1xuXG52YXIgX2hhbmRsZUFjdGlvbiA9IHJlcXVpcmUoJy4vaGFuZGxlQWN0aW9uJyk7XG5cbnZhciBfaGFuZGxlQWN0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hhbmRsZUFjdGlvbik7XG5cbnZhciBfb3duS2V5cyA9IHJlcXVpcmUoJy4vb3duS2V5cycpO1xuXG52YXIgX293bktleXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb3duS2V5cyk7XG5cbnZhciBfcmVkdWNlUmVkdWNlcnMgPSByZXF1aXJlKCdyZWR1Y2UtcmVkdWNlcnMnKTtcblxudmFyIF9yZWR1Y2VSZWR1Y2VyczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWR1Y2VSZWR1Y2Vycyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gZWxzZSB7IHJldHVybiBBcnJheS5mcm9tKGFycik7IH0gfVxuXG5mdW5jdGlvbiBoYW5kbGVBY3Rpb25zKGhhbmRsZXJzLCBkZWZhdWx0U3RhdGUpIHtcbiAgdmFyIHJlZHVjZXJzID0gKDAsIF9vd25LZXlzMi5kZWZhdWx0KShoYW5kbGVycykubWFwKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgcmV0dXJuICgwLCBfaGFuZGxlQWN0aW9uMi5kZWZhdWx0KSh0eXBlLCBoYW5kbGVyc1t0eXBlXSwgZGVmYXVsdFN0YXRlKTtcbiAgfSk7XG4gIHZhciByZWR1Y2VyID0gX3JlZHVjZVJlZHVjZXJzMi5kZWZhdWx0LmFwcGx5KHVuZGVmaW5lZCwgX3RvQ29uc3VtYWJsZUFycmF5KHJlZHVjZXJzKSk7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbikge1xuICAgIHJldHVybiByZWR1Y2VyKHN0YXRlLCBhY3Rpb24pO1xuICB9O1xufSJdfQ==