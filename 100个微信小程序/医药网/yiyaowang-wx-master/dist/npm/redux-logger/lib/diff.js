"use strict";var exports=module.exports={};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = diffLogger;

var _deepDiff = require('../../deep-diff/index.js');

var _deepDiff2 = _interopRequireDefault(_deepDiff);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

// https://github.com/flitbit/diff#differences
var dictionary = {
  'E': {
    color: '#2196F3',
    text: 'CHANGED:'
  },
  'N': {
    color: '#4CAF50',
    text: 'ADDED:'
  },
  'D': {
    color: '#F44336',
    text: 'DELETED:'
  },
  'A': {
    color: '#2196F3',
    text: 'ARRAY:'
  }
};

function style(kind) {
  return 'color: ' + dictionary[kind].color + '; font-weight: bold';
}

function render(diff) {
  var kind = diff.kind;
  var path = diff.path;
  var lhs = diff.lhs;
  var rhs = diff.rhs;
  var index = diff.index;
  var item = diff.item;

  switch (kind) {
    case 'E':
      return path.join('.') + ' ' + lhs + ' → ' + rhs;
    case 'N':
      return path.join('.') + ' ' + rhs;
    case 'D':
      return '' + path.join('.');
    case 'A':
      return [path.join('.') + '[' + index + ']', item];
    default:
      return null;
  }
}

function diffLogger(prevState, newState, logger, isCollapsed) {
  var diff = (0, _deepDiff2.default)(prevState, newState);

  try {
    if (isCollapsed) {
      logger.groupCollapsed('diff');
    } else {
      logger.group('diff');
    }
  } catch (e) {
    logger.log('diff');
  }

  if (diff) {
    diff.forEach(function (elem) {
      var kind = elem.kind;

      var output = render(elem);

      logger.log('%c ' + dictionary[kind].text, style(kind), output);
    });
  } else {
    logger.log('—— no diff ——');
  }

  try {
    logger.groupEnd();
  } catch (e) {
    logger.log('—— diff end —— ');
  }
}
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRpZmYuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwiZGlmZkxvZ2dlciIsIl9kZWVwRGlmZiIsInJlcXVpcmUiLCJfZGVlcERpZmYyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkaWN0aW9uYXJ5IiwiY29sb3IiLCJ0ZXh0Iiwic3R5bGUiLCJraW5kIiwicmVuZGVyIiwiZGlmZiIsInBhdGgiLCJsaHMiLCJyaHMiLCJpbmRleCIsIml0ZW0iLCJqb2luIiwicHJldlN0YXRlIiwibmV3U3RhdGUiLCJsb2dnZXIiLCJpc0NvbGxhcHNlZCIsImdyb3VwQ29sbGFwc2VkIiwiZ3JvdXAiLCJlIiwibG9nIiwiZm9yRWFjaCIsImVsZW0iLCJvdXRwdXQiLCJncm91cEVuZCIsIm1vZHVsZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxTQUFPO0FBRG9DLENBQTdDO0FBR0FELFFBQVFFLE9BQVIsR0FBa0JDLFVBQWxCOztBQUVBLElBQUlDLFlBQVlDLFFBQVEsV0FBUixDQUFoQjs7QUFFQSxJQUFJQyxhQUFhQyx1QkFBdUJILFNBQXZCLENBQWpCOztBQUVBLFNBQVNHLHNCQUFULENBQWdDQyxHQUFoQyxFQUFxQztBQUFFLFNBQU9BLE9BQU9BLElBQUlDLFVBQVgsR0FBd0JELEdBQXhCLEdBQThCLEVBQUVOLFNBQVNNLEdBQVgsRUFBckM7QUFBd0Q7O0FBRS9GO0FBQ0EsSUFBSUUsYUFBYTtBQUNmLE9BQUs7QUFDSEMsV0FBTyxTQURKO0FBRUhDLFVBQU07QUFGSCxHQURVO0FBS2YsT0FBSztBQUNIRCxXQUFPLFNBREo7QUFFSEMsVUFBTTtBQUZILEdBTFU7QUFTZixPQUFLO0FBQ0hELFdBQU8sU0FESjtBQUVIQyxVQUFNO0FBRkgsR0FUVTtBQWFmLE9BQUs7QUFDSEQsV0FBTyxTQURKO0FBRUhDLFVBQU07QUFGSDtBQWJVLENBQWpCOztBQW1CQSxTQUFTQyxLQUFULENBQWVDLElBQWYsRUFBcUI7QUFDbkIsU0FBTyxZQUFZSixXQUFXSSxJQUFYLEVBQWlCSCxLQUE3QixHQUFxQyxxQkFBNUM7QUFDRDs7QUFFRCxTQUFTSSxNQUFULENBQWdCQyxJQUFoQixFQUFzQjtBQUNwQixNQUFJRixPQUFPRSxLQUFLRixJQUFoQjtBQUNBLE1BQUlHLE9BQU9ELEtBQUtDLElBQWhCO0FBQ0EsTUFBSUMsTUFBTUYsS0FBS0UsR0FBZjtBQUNBLE1BQUlDLE1BQU1ILEtBQUtHLEdBQWY7QUFDQSxNQUFJQyxRQUFRSixLQUFLSSxLQUFqQjtBQUNBLE1BQUlDLE9BQU9MLEtBQUtLLElBQWhCOztBQUVBLFVBQVFQLElBQVI7QUFDRSxTQUFLLEdBQUw7QUFDRSxhQUFPRyxLQUFLSyxJQUFMLENBQVUsR0FBVixJQUFpQixHQUFqQixHQUF1QkosR0FBdkIsR0FBNkIsS0FBN0IsR0FBcUNDLEdBQTVDO0FBQ0YsU0FBSyxHQUFMO0FBQ0UsYUFBT0YsS0FBS0ssSUFBTCxDQUFVLEdBQVYsSUFBaUIsR0FBakIsR0FBdUJILEdBQTlCO0FBQ0YsU0FBSyxHQUFMO0FBQ0UsYUFBTyxLQUFLRixLQUFLSyxJQUFMLENBQVUsR0FBVixDQUFaO0FBQ0YsU0FBSyxHQUFMO0FBQ0UsYUFBTyxDQUFDTCxLQUFLSyxJQUFMLENBQVUsR0FBVixJQUFpQixHQUFqQixHQUF1QkYsS0FBdkIsR0FBK0IsR0FBaEMsRUFBcUNDLElBQXJDLENBQVA7QUFDRjtBQUNFLGFBQU8sSUFBUDtBQVZKO0FBWUQ7O0FBRUQsU0FBU2xCLFVBQVQsQ0FBb0JvQixTQUFwQixFQUErQkMsUUFBL0IsRUFBeUNDLE1BQXpDLEVBQWlEQyxXQUFqRCxFQUE4RDtBQUM1RCxNQUFJVixPQUFPLENBQUMsR0FBR1YsV0FBV0osT0FBZixFQUF3QnFCLFNBQXhCLEVBQW1DQyxRQUFuQyxDQUFYOztBQUVBLE1BQUk7QUFDRixRQUFJRSxXQUFKLEVBQWlCO0FBQ2ZELGFBQU9FLGNBQVAsQ0FBc0IsTUFBdEI7QUFDRCxLQUZELE1BRU87QUFDTEYsYUFBT0csS0FBUCxDQUFhLE1BQWI7QUFDRDtBQUNGLEdBTkQsQ0FNRSxPQUFPQyxDQUFQLEVBQVU7QUFDVkosV0FBT0ssR0FBUCxDQUFXLE1BQVg7QUFDRDs7QUFFRCxNQUFJZCxJQUFKLEVBQVU7QUFDUkEsU0FBS2UsT0FBTCxDQUFhLFVBQVVDLElBQVYsRUFBZ0I7QUFDM0IsVUFBSWxCLE9BQU9rQixLQUFLbEIsSUFBaEI7O0FBRUEsVUFBSW1CLFNBQVNsQixPQUFPaUIsSUFBUCxDQUFiOztBQUVBUCxhQUFPSyxHQUFQLENBQVcsUUFBUXBCLFdBQVdJLElBQVgsRUFBaUJGLElBQXBDLEVBQTBDQyxNQUFNQyxJQUFOLENBQTFDLEVBQXVEbUIsTUFBdkQ7QUFDRCxLQU5EO0FBT0QsR0FSRCxNQVFPO0FBQ0xSLFdBQU9LLEdBQVAsQ0FBVyxlQUFYO0FBQ0Q7O0FBRUQsTUFBSTtBQUNGTCxXQUFPUyxRQUFQO0FBQ0QsR0FGRCxDQUVFLE9BQU9MLENBQVAsRUFBVTtBQUNWSixXQUFPSyxHQUFQLENBQVcsaUJBQVg7QUFDRDtBQUNGO0FBQ0RLLE9BQU9uQyxPQUFQLEdBQWlCQSxRQUFRLFNBQVIsQ0FBakIiLCJmaWxlIjoidW5rbm93biIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRpZmZMb2dnZXI7XG5cbnZhciBfZGVlcERpZmYgPSByZXF1aXJlKCdkZWVwLWRpZmYnKTtcblxudmFyIF9kZWVwRGlmZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWVwRGlmZik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mbGl0Yml0L2RpZmYjZGlmZmVyZW5jZXNcbnZhciBkaWN0aW9uYXJ5ID0ge1xuICAnRSc6IHtcbiAgICBjb2xvcjogJyMyMTk2RjMnLFxuICAgIHRleHQ6ICdDSEFOR0VEOidcbiAgfSxcbiAgJ04nOiB7XG4gICAgY29sb3I6ICcjNENBRjUwJyxcbiAgICB0ZXh0OiAnQURERUQ6J1xuICB9LFxuICAnRCc6IHtcbiAgICBjb2xvcjogJyNGNDQzMzYnLFxuICAgIHRleHQ6ICdERUxFVEVEOidcbiAgfSxcbiAgJ0EnOiB7XG4gICAgY29sb3I6ICcjMjE5NkYzJyxcbiAgICB0ZXh0OiAnQVJSQVk6J1xuICB9XG59O1xuXG5mdW5jdGlvbiBzdHlsZShraW5kKSB7XG4gIHJldHVybiAnY29sb3I6ICcgKyBkaWN0aW9uYXJ5W2tpbmRdLmNvbG9yICsgJzsgZm9udC13ZWlnaHQ6IGJvbGQnO1xufVxuXG5mdW5jdGlvbiByZW5kZXIoZGlmZikge1xuICB2YXIga2luZCA9IGRpZmYua2luZDtcbiAgdmFyIHBhdGggPSBkaWZmLnBhdGg7XG4gIHZhciBsaHMgPSBkaWZmLmxocztcbiAgdmFyIHJocyA9IGRpZmYucmhzO1xuICB2YXIgaW5kZXggPSBkaWZmLmluZGV4O1xuICB2YXIgaXRlbSA9IGRpZmYuaXRlbTtcblxuICBzd2l0Y2ggKGtpbmQpIHtcbiAgICBjYXNlICdFJzpcbiAgICAgIHJldHVybiBwYXRoLmpvaW4oJy4nKSArICcgJyArIGxocyArICcg4oaSICcgKyByaHM7XG4gICAgY2FzZSAnTic6XG4gICAgICByZXR1cm4gcGF0aC5qb2luKCcuJykgKyAnICcgKyByaHM7XG4gICAgY2FzZSAnRCc6XG4gICAgICByZXR1cm4gJycgKyBwYXRoLmpvaW4oJy4nKTtcbiAgICBjYXNlICdBJzpcbiAgICAgIHJldHVybiBbcGF0aC5qb2luKCcuJykgKyAnWycgKyBpbmRleCArICddJywgaXRlbV07XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRpZmZMb2dnZXIocHJldlN0YXRlLCBuZXdTdGF0ZSwgbG9nZ2VyLCBpc0NvbGxhcHNlZCkge1xuICB2YXIgZGlmZiA9ICgwLCBfZGVlcERpZmYyLmRlZmF1bHQpKHByZXZTdGF0ZSwgbmV3U3RhdGUpO1xuXG4gIHRyeSB7XG4gICAgaWYgKGlzQ29sbGFwc2VkKSB7XG4gICAgICBsb2dnZXIuZ3JvdXBDb2xsYXBzZWQoJ2RpZmYnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nZ2VyLmdyb3VwKCdkaWZmJyk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nZ2VyLmxvZygnZGlmZicpO1xuICB9XG5cbiAgaWYgKGRpZmYpIHtcbiAgICBkaWZmLmZvckVhY2goZnVuY3Rpb24gKGVsZW0pIHtcbiAgICAgIHZhciBraW5kID0gZWxlbS5raW5kO1xuXG4gICAgICB2YXIgb3V0cHV0ID0gcmVuZGVyKGVsZW0pO1xuXG4gICAgICBsb2dnZXIubG9nKCclYyAnICsgZGljdGlvbmFyeVtraW5kXS50ZXh0LCBzdHlsZShraW5kKSwgb3V0cHV0KTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBsb2dnZXIubG9nKCfigJTigJQgbm8gZGlmZiDigJTigJQnKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgbG9nZ2VyLmdyb3VwRW5kKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBsb2dnZXIubG9nKCfigJTigJQgZGlmZiBlbmQg4oCU4oCUICcpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiXX0=