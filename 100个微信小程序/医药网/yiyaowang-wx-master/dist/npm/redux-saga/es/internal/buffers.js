"use strict";var exports=module.exports={};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buffers = exports.BUFFER_OVERFLOW = undefined;

var _utils = require('./utils.js');

var BUFFER_OVERFLOW = exports.BUFFER_OVERFLOW = 'Channel\'s Buffer overflow!';

var ON_OVERFLOW_THROW = 1;
var ON_OVERFLOW_DROP = 2;
var ON_OVERFLOW_SLIDE = 3;
var ON_OVERFLOW_EXPAND = 4;

var zeroBuffer = { isEmpty: _utils.kTrue, put: _utils.noop, take: _utils.noop };

function ringBuffer() {
  var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
  var overflowAction = arguments[1];

  var arr = new Array(limit);
  var length = 0;
  var pushIndex = 0;
  var popIndex = 0;

  var push = function push(it) {
    arr[pushIndex] = it;
    pushIndex = (pushIndex + 1) % limit;
    length++;
  };

  var take = function take() {
    if (length != 0) {
      var it = arr[popIndex];
      arr[popIndex] = null;
      length--;
      popIndex = (popIndex + 1) % limit;
      return it;
    }
  };

  var flush = function flush() {
    var items = [];
    while (length) {
      items.push(take());
    }
    return items;
  };

  return {
    isEmpty: function isEmpty() {
      return length == 0;
    },
    put: function put(it) {
      if (length < limit) {
        push(it);
      } else {
        var doubledLimit = void 0;
        switch (overflowAction) {
          case ON_OVERFLOW_THROW:
            throw new Error(BUFFER_OVERFLOW);
          case ON_OVERFLOW_SLIDE:
            arr[pushIndex] = it;
            pushIndex = (pushIndex + 1) % limit;
            popIndex = pushIndex;
            break;
          case ON_OVERFLOW_EXPAND:
            doubledLimit = 2 * limit;

            arr = flush();

            length = arr.length;
            pushIndex = arr.length;
            popIndex = 0;

            arr.length = doubledLimit;
            limit = doubledLimit;

            push(it);
            break;
          default:
          // DROP
        }
      }
    },
    take: take, flush: flush
  };
}

var buffers = exports.buffers = {
  none: function none() {
    return zeroBuffer;
  },
  fixed: function fixed(limit) {
    return ringBuffer(limit, ON_OVERFLOW_THROW);
  },
  dropping: function dropping(limit) {
    return ringBuffer(limit, ON_OVERFLOW_DROP);
  },
  sliding: function sliding(limit) {
    return ringBuffer(limit, ON_OVERFLOW_SLIDE);
  },
  expanding: function expanding(initialSize) {
    return ringBuffer(initialSize, ON_OVERFLOW_EXPAND);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1ZmZlcnMuanMiXSwibmFtZXMiOlsiQlVGRkVSX09WRVJGTE9XIiwiT05fT1ZFUkZMT1dfVEhST1ciLCJPTl9PVkVSRkxPV19EUk9QIiwiT05fT1ZFUkZMT1dfU0xJREUiLCJPTl9PVkVSRkxPV19FWFBBTkQiLCJ6ZXJvQnVmZmVyIiwiaXNFbXB0eSIsInB1dCIsInRha2UiLCJyaW5nQnVmZmVyIiwibGltaXQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJvdmVyZmxvd0FjdGlvbiIsImFyciIsIkFycmF5IiwicHVzaEluZGV4IiwicG9wSW5kZXgiLCJwdXNoIiwiaXQiLCJmbHVzaCIsIml0ZW1zIiwiZG91YmxlZExpbWl0IiwiRXJyb3IiLCJidWZmZXJzIiwibm9uZSIsImZpeGVkIiwiZHJvcHBpbmciLCJzbGlkaW5nIiwiZXhwYW5kaW5nIiwiaW5pdGlhbFNpemUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFFTyxJQUFJQSw0Q0FBa0IsNkJBQXRCOztBQUVQLElBQUlDLG9CQUFvQixDQUF4QjtBQUNBLElBQUlDLG1CQUFtQixDQUF2QjtBQUNBLElBQUlDLG9CQUFvQixDQUF4QjtBQUNBLElBQUlDLHFCQUFxQixDQUF6Qjs7QUFFQSxJQUFJQyxhQUFhLEVBQUVDLHFCQUFGLEVBQWtCQyxnQkFBbEIsRUFBNkJDLGlCQUE3QixFQUFqQjs7QUFFQSxTQUFTQyxVQUFULEdBQXNCO0FBQ3BCLE1BQUlDLFFBQVFDLFVBQVVDLE1BQVYsR0FBbUIsQ0FBbkIsSUFBd0JELFVBQVUsQ0FBVixNQUFpQkUsU0FBekMsR0FBcURGLFVBQVUsQ0FBVixDQUFyRCxHQUFvRSxFQUFoRjtBQUNBLE1BQUlHLGlCQUFpQkgsVUFBVSxDQUFWLENBQXJCOztBQUVBLE1BQUlJLE1BQU0sSUFBSUMsS0FBSixDQUFVTixLQUFWLENBQVY7QUFDQSxNQUFJRSxTQUFTLENBQWI7QUFDQSxNQUFJSyxZQUFZLENBQWhCO0FBQ0EsTUFBSUMsV0FBVyxDQUFmOztBQUVBLE1BQUlDLE9BQU8sU0FBU0EsSUFBVCxDQUFjQyxFQUFkLEVBQWtCO0FBQzNCTCxRQUFJRSxTQUFKLElBQWlCRyxFQUFqQjtBQUNBSCxnQkFBWSxDQUFDQSxZQUFZLENBQWIsSUFBa0JQLEtBQTlCO0FBQ0FFO0FBQ0QsR0FKRDs7QUFNQSxNQUFJSixPQUFPLFNBQVNBLElBQVQsR0FBZ0I7QUFDekIsUUFBSUksVUFBVSxDQUFkLEVBQWlCO0FBQ2YsVUFBSVEsS0FBS0wsSUFBSUcsUUFBSixDQUFUO0FBQ0FILFVBQUlHLFFBQUosSUFBZ0IsSUFBaEI7QUFDQU47QUFDQU0saUJBQVcsQ0FBQ0EsV0FBVyxDQUFaLElBQWlCUixLQUE1QjtBQUNBLGFBQU9VLEVBQVA7QUFDRDtBQUNGLEdBUkQ7O0FBVUEsTUFBSUMsUUFBUSxTQUFTQSxLQUFULEdBQWlCO0FBQzNCLFFBQUlDLFFBQVEsRUFBWjtBQUNBLFdBQU9WLE1BQVAsRUFBZTtBQUNiVSxZQUFNSCxJQUFOLENBQVdYLE1BQVg7QUFDRDtBQUNELFdBQU9jLEtBQVA7QUFDRCxHQU5EOztBQVFBLFNBQU87QUFDTGhCLGFBQVMsU0FBU0EsT0FBVCxHQUFtQjtBQUMxQixhQUFPTSxVQUFVLENBQWpCO0FBQ0QsS0FISTtBQUlMTCxTQUFLLFNBQVNBLEdBQVQsQ0FBYWEsRUFBYixFQUFpQjtBQUNwQixVQUFJUixTQUFTRixLQUFiLEVBQW9CO0FBQ2xCUyxhQUFLQyxFQUFMO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsWUFBSUcsZUFBZSxLQUFLLENBQXhCO0FBQ0EsZ0JBQVFULGNBQVI7QUFDRSxlQUFLYixpQkFBTDtBQUNFLGtCQUFNLElBQUl1QixLQUFKLENBQVV4QixlQUFWLENBQU47QUFDRixlQUFLRyxpQkFBTDtBQUNFWSxnQkFBSUUsU0FBSixJQUFpQkcsRUFBakI7QUFDQUgsd0JBQVksQ0FBQ0EsWUFBWSxDQUFiLElBQWtCUCxLQUE5QjtBQUNBUSx1QkFBV0QsU0FBWDtBQUNBO0FBQ0YsZUFBS2Isa0JBQUw7QUFDRW1CLDJCQUFlLElBQUliLEtBQW5COztBQUVBSyxrQkFBTU0sT0FBTjs7QUFFQVQscUJBQVNHLElBQUlILE1BQWI7QUFDQUssd0JBQVlGLElBQUlILE1BQWhCO0FBQ0FNLHVCQUFXLENBQVg7O0FBRUFILGdCQUFJSCxNQUFKLEdBQWFXLFlBQWI7QUFDQWIsb0JBQVFhLFlBQVI7O0FBRUFKLGlCQUFLQyxFQUFMO0FBQ0E7QUFDRjtBQUNBO0FBdkJGO0FBeUJEO0FBQ0YsS0FuQ0k7QUFvQ0xaLFVBQU1BLElBcENELEVBb0NPYSxPQUFPQTtBQXBDZCxHQUFQO0FBc0NEOztBQUVNLElBQUlJLDRCQUFVO0FBQ25CQyxRQUFNLFNBQVNBLElBQVQsR0FBZ0I7QUFDcEIsV0FBT3JCLFVBQVA7QUFDRCxHQUhrQjtBQUluQnNCLFNBQU8sU0FBU0EsS0FBVCxDQUFlakIsS0FBZixFQUFzQjtBQUMzQixXQUFPRCxXQUFXQyxLQUFYLEVBQWtCVCxpQkFBbEIsQ0FBUDtBQUNELEdBTmtCO0FBT25CMkIsWUFBVSxTQUFTQSxRQUFULENBQWtCbEIsS0FBbEIsRUFBeUI7QUFDakMsV0FBT0QsV0FBV0MsS0FBWCxFQUFrQlIsZ0JBQWxCLENBQVA7QUFDRCxHQVRrQjtBQVVuQjJCLFdBQVMsU0FBU0EsT0FBVCxDQUFpQm5CLEtBQWpCLEVBQXdCO0FBQy9CLFdBQU9ELFdBQVdDLEtBQVgsRUFBa0JQLGlCQUFsQixDQUFQO0FBQ0QsR0Faa0I7QUFhbkIyQixhQUFXLFNBQVNBLFNBQVQsQ0FBbUJDLFdBQW5CLEVBQWdDO0FBQ3pDLFdBQU90QixXQUFXc0IsV0FBWCxFQUF3QjNCLGtCQUF4QixDQUFQO0FBQ0Q7QUFma0IsQ0FBZCIsImZpbGUiOiJ1bmtub3duIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsga1RydWUsIG5vb3AgfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IHZhciBCVUZGRVJfT1ZFUkZMT1cgPSAnQ2hhbm5lbFxcJ3MgQnVmZmVyIG92ZXJmbG93ISc7XG5cbnZhciBPTl9PVkVSRkxPV19USFJPVyA9IDE7XG52YXIgT05fT1ZFUkZMT1dfRFJPUCA9IDI7XG52YXIgT05fT1ZFUkZMT1dfU0xJREUgPSAzO1xudmFyIE9OX09WRVJGTE9XX0VYUEFORCA9IDQ7XG5cbnZhciB6ZXJvQnVmZmVyID0geyBpc0VtcHR5OiBrVHJ1ZSwgcHV0OiBub29wLCB0YWtlOiBub29wIH07XG5cbmZ1bmN0aW9uIHJpbmdCdWZmZXIoKSB7XG4gIHZhciBsaW1pdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMTA7XG4gIHZhciBvdmVyZmxvd0FjdGlvbiA9IGFyZ3VtZW50c1sxXTtcblxuICB2YXIgYXJyID0gbmV3IEFycmF5KGxpbWl0KTtcbiAgdmFyIGxlbmd0aCA9IDA7XG4gIHZhciBwdXNoSW5kZXggPSAwO1xuICB2YXIgcG9wSW5kZXggPSAwO1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChpdCkge1xuICAgIGFycltwdXNoSW5kZXhdID0gaXQ7XG4gICAgcHVzaEluZGV4ID0gKHB1c2hJbmRleCArIDEpICUgbGltaXQ7XG4gICAgbGVuZ3RoKys7XG4gIH07XG5cbiAgdmFyIHRha2UgPSBmdW5jdGlvbiB0YWtlKCkge1xuICAgIGlmIChsZW5ndGggIT0gMCkge1xuICAgICAgdmFyIGl0ID0gYXJyW3BvcEluZGV4XTtcbiAgICAgIGFycltwb3BJbmRleF0gPSBudWxsO1xuICAgICAgbGVuZ3RoLS07XG4gICAgICBwb3BJbmRleCA9IChwb3BJbmRleCArIDEpICUgbGltaXQ7XG4gICAgICByZXR1cm4gaXQ7XG4gICAgfVxuICB9O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIHZhciBpdGVtcyA9IFtdO1xuICAgIHdoaWxlIChsZW5ndGgpIHtcbiAgICAgIGl0ZW1zLnB1c2godGFrZSgpKTtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZW1zO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgaXNFbXB0eTogZnVuY3Rpb24gaXNFbXB0eSgpIHtcbiAgICAgIHJldHVybiBsZW5ndGggPT0gMDtcbiAgICB9LFxuICAgIHB1dDogZnVuY3Rpb24gcHV0KGl0KSB7XG4gICAgICBpZiAobGVuZ3RoIDwgbGltaXQpIHtcbiAgICAgICAgcHVzaChpdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZG91YmxlZExpbWl0ID0gdm9pZCAwO1xuICAgICAgICBzd2l0Y2ggKG92ZXJmbG93QWN0aW9uKSB7XG4gICAgICAgICAgY2FzZSBPTl9PVkVSRkxPV19USFJPVzpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihCVUZGRVJfT1ZFUkZMT1cpO1xuICAgICAgICAgIGNhc2UgT05fT1ZFUkZMT1dfU0xJREU6XG4gICAgICAgICAgICBhcnJbcHVzaEluZGV4XSA9IGl0O1xuICAgICAgICAgICAgcHVzaEluZGV4ID0gKHB1c2hJbmRleCArIDEpICUgbGltaXQ7XG4gICAgICAgICAgICBwb3BJbmRleCA9IHB1c2hJbmRleDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgT05fT1ZFUkZMT1dfRVhQQU5EOlxuICAgICAgICAgICAgZG91YmxlZExpbWl0ID0gMiAqIGxpbWl0O1xuXG4gICAgICAgICAgICBhcnIgPSBmbHVzaCgpO1xuXG4gICAgICAgICAgICBsZW5ndGggPSBhcnIubGVuZ3RoO1xuICAgICAgICAgICAgcHVzaEluZGV4ID0gYXJyLmxlbmd0aDtcbiAgICAgICAgICAgIHBvcEluZGV4ID0gMDtcblxuICAgICAgICAgICAgYXJyLmxlbmd0aCA9IGRvdWJsZWRMaW1pdDtcbiAgICAgICAgICAgIGxpbWl0ID0gZG91YmxlZExpbWl0O1xuXG4gICAgICAgICAgICBwdXNoKGl0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgLy8gRFJPUFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICB0YWtlOiB0YWtlLCBmbHVzaDogZmx1c2hcbiAgfTtcbn1cblxuZXhwb3J0IHZhciBidWZmZXJzID0ge1xuICBub25lOiBmdW5jdGlvbiBub25lKCkge1xuICAgIHJldHVybiB6ZXJvQnVmZmVyO1xuICB9LFxuICBmaXhlZDogZnVuY3Rpb24gZml4ZWQobGltaXQpIHtcbiAgICByZXR1cm4gcmluZ0J1ZmZlcihsaW1pdCwgT05fT1ZFUkZMT1dfVEhST1cpO1xuICB9LFxuICBkcm9wcGluZzogZnVuY3Rpb24gZHJvcHBpbmcobGltaXQpIHtcbiAgICByZXR1cm4gcmluZ0J1ZmZlcihsaW1pdCwgT05fT1ZFUkZMT1dfRFJPUCk7XG4gIH0sXG4gIHNsaWRpbmc6IGZ1bmN0aW9uIHNsaWRpbmcobGltaXQpIHtcbiAgICByZXR1cm4gcmluZ0J1ZmZlcihsaW1pdCwgT05fT1ZFUkZMT1dfU0xJREUpO1xuICB9LFxuICBleHBhbmRpbmc6IGZ1bmN0aW9uIGV4cGFuZGluZyhpbml0aWFsU2l6ZSkge1xuICAgIHJldHVybiByaW5nQnVmZmVyKGluaXRpYWxTaXplLCBPTl9PVkVSRkxPV19FWFBBTkQpO1xuICB9XG59OyJdfQ==